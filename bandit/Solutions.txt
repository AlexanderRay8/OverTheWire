Website: https://overthewire.org/wargames/bandit/
Level 0: ssh into bandit.labs.overthewire.org on port 2220
Solution:
Username and password are given.
Commands:
ssh bandit0@bandit.labs.overthewire.org -p 2220
Password:
bandit0

Level 0->1 Solution:
Readme is in home directory, open it, and copy the password to bandit 1
Commands:
cat readme
Password:
NH2SXQwcBdpmTEzi3bvBHMM9H66vVXjL

Level 1->2 Solution:
Password is in a file called "-". can cat with ./
Commands:
cat ./-
Password:
rRGizSaX8Mk1RTb1CNQoXTcYZWU6lgzi

Level 2->3 Solution:
Password is in a file called "spaces in this filename". can cat with ""
Commands:
cat "spaces in this filename"
Password:
aBZ0W5EmUfAf7kHTQeOwd8bauFJ2lAiG

Level 3->4 Solution:
The password is in a hidden file in the inhere directory
Commands:
ls -a ./inhere
cat ./inhere/.hidden
Password:
2EW7BBsr6aMMoJ2HjW067dm8EgX26xNe

Level 4->5 Solution:
The password is in the only human readable file in the inhere directory.
Commands:
file ./inhere/*         # This will list out the file types of all of the files
cat ./inhere/-file07    # file07 was the human readable file
Password:
lrIWWI6bB37kxfiCQZqUdOIYfr6eEeqR

Level 5->6 Solution:
The password is a file in the inhere directory and is:
    human-readable
    1033 bytes in size
    not executable
Commands:
find -size 1033c -readable ! -executable      # the exclamation point nots the next flag.
cat ./inhere/maybehere07/.file2
Password:
P4L4vucdmLnm8I7Vl7jG1ApGSfjYKqJU

Level 6->7 Solution:
The password is stored in a file somewhere on the computer and is:
    owned by user bandit7
    owned by group bandit6
    33 bytes in size
Commands:
find / -size 33c -user bandit7 -group bandit6 2>/dev/null # We pipe errors to /dev/null to throw them out
cat /var/lib/dpkg/info/bandit7.password
Password:
z7WtoNQU2XfjmMtWA8u5rN4vzqu4v99S

Level 7->8 Solution:
The password is stored in the file data.txt next to the word millionth
Commands:
cat data.txt | grep millionth
Password:
TESKZC0XvTetK0S9xNwm25STk5iWrBvP

Level 8->9 Solution:
The password for the next level is stored in the file data.txt
and is the only line of text that occurs only once
Commands:
cat data.txt | sort | uniq -u
Password:
EN632PlfYiZbn3PhVK3XOGSlNInNE00t

Level 9->10 Solution:
The password for the next level is stored in the file data.txt 
in one of the few human-readable strings, preceded by several ‘=’ characters.
Commands:
strings data.txt | grep -E "=+"
Password:
G7w8LIi6J3kTb8A7j9LgrywtEUlyyp6s

Level 10->11 Solution:
The password for the next level is stored in the file data.txt, 
which contains base64 encoded data
Commands:
base64 -d data.txt
Password:
6zPeziLdR2RKNdNYFNb6nVCKzphlXHBM

Level 11->12 Solution:
The password for the next level is stored in the file data.txt, 
where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positions
Commands:
cat data.txt | tr 'A-Za-z' 'N-ZA-Mn-za-m'
Password:
JVNBBFSmZwKKOP0XbFXOoW8chDz5yVRv

Level 12->13 Solution:
The password is in a hexdump and compressed multiple times.
Some files needed to be renamed before extracting.
I will put the proper renamed extension after, otherwise just .txt
Commands:
xxd -r data.txt
gunzip data.txt.gz
bzip2 -x data.txt
tar -x data.txt.tar
Password:
wbWdlBxEir4CaE8LaPhauuOo6pwRmrDw

Level 13->14 Solution:
The password for the next level is stored in /etc/bandit_pass/bandit14 and 
can only be read by user bandit14. For this level, you don’t get the next password, 
but you get a private SSH key that can be used to log into the next level. 
Note: localhost is a hostname that refers to the machine you are working on
Commands:
ssh bandit14@localhost -p 2220 -i sshkey.private
cat /etc/bandit_pass/bandit14
Password:
fGrHPx402xGC7U7rXKDaxiWFTOiF0ENq

Level 14->15 Solution:
The password for the next level can be retrieved by submitting the 
password of the current level to port 30000 on localhost.
Commands:
nc localhost 30000 < /etc/bandit_pass/bandit14
Password:
jN2kgmIXJ6fShzhT2avhotn4Zcka6tnt

Level 15->16 Solution:
The password for the next level can be retrieved by submitting the password 
of the current level to port 30001 on localhost using SSL encryption.
Commands:
openssl s_client -connect localhost:30001 -ign_eof < /etc/bandit_pass/bandit15
Password:
JQttfApK4SeyHwDlI9SXGR50qclOAil1

Level 16->17 Solution:
The credentials for the next level can be retrieved by submitting the password 
of the current level to a port on localhost in the range 31000 to 32000. 
First find out which of these ports have a server listening on them. 
Then find out which of those speak SSL and which don’t. 
There is only 1 server that will give the next credentials, the others will 
simply send back to you whatever you send to it.
Commands:
nmap -sV localhost -p 31000-32000 # Finds ssl port 31790
openssl s_client -connect localhost:31790 -ign_eof < /etc/bandit_pass/bandit16 # gives rsa key for 17
ssh bandit17@localhost -p 2220 -i mykey.private # Make sure to remove permissions for others for the key.
Password:
VwOSWtCA7lRKkTfbr2IDh6awj9RNZM5e

Level 17->18 Solution:
There are 2 files in the homedirectory: passwords.old and passwords.new. The password for the next level 
is in passwords.new and is the only line that has been changed between passwords.old and passwords.new
Commands:
diff passwords.new passwords.old
Password:
hga5tuuCLF6fFzUpnagiMN8ssu9LFrdg

Level 18->19 Solution:
The password for the next level is stored in a file readme in the homedirectory.
Unfortunately, someone has modified .bashrc to log you out when you log in with SSH.
Commands:
ssh bandit18@bandit.labs.overthewire.org -p 2220 ls # Can run commands before bashrc is read.
ssh bandit18@bandit.labs.overthewire.org -p 2220 cat readme # readme contains password.
Password:
awhqfNnAbc1naukrpqDYcF95h7HoMTrC

Level 19->20 Solution:
To gain access to the next level, you should use the setuid binary in the homedirectory. 
Execute it without arguments to find out how to use it. The password for this level 
can be found in the usual place (/etc/bandit_pass), after you have used the setuid binary.
Commands:
./bandit20-do cat /etc/bandit_pass/bandit20
Password:
VxCazJaVykI6W36BkBU0mJTCM8rR95XT

Level 20->21 Solution:
There is a setuid binary in the homedirectory that does the following: it makes a connection 
to localhost on the port you specify as a commandline argument. It then reads a line of text 
from the connection and compares it to the password in the previous level (bandit20). 
If the password is correct, it will transmit the password for the next level (bandit21).
Commands:
tmux # Then split panes (Ctrl-b, ")so we have 2 terminals on the remote host.
nc -l localhost 31001 < /etc/bandit_pass/bandit20 # On one terminal
./suconnect 31001 # On other terminal
Password:
NvEJF7oVjkddltPSrdKEFOllh9V1IBcq

Level 21->22 Solution:
A program is running automatically at regular intervals from cron, the time-based job scheduler. 
Look in /etc/cron.d/ for the configuration and see what command is being executed.
Commands:
ls /etc/cron.d # shows bandit22 cron job
cat cronjob_bandit22 # shows job running in /usr/bin/cronjob_bandit22.sh
cat /usr/bin/cronjob_bandit22 # shows copying the password to a temp file
cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv # shows password
Password:
WdDozAdTM2z9DiFEQ2mGlwngMfj4EZff

Level 22->23 Solution:
A program is running automatically at regular intervals from cron, the time-based job scheduler.
Look in /etc/cron.d/ for the configuration and see what command is being executed.
Commands:
cat /usr/bin/cronjob_bandit23.sh
echo 'I am user bandit23' | md5sum | cut -d ' ' -f 1 # prints out tmp file with password
cat /tmp/8ca319486bfbbc3663ea0fbe81326349
Password:
QYw0Y2aiA672PsMmh9puTQuhoz8SyR2G

Level 23->24 Solution:
A program is running automatically at regular intervals from cron, the time-based job scheduler. 
Look in /etc/cron.d/ for the configuration and see what command is being executed.
NOTE: This level requires you to create your own first shell-script. 
This is a very big step and you should be proud of yourself when you beat this level!
NOTE 2: Keep in mind that your shell script is removed once executed, so you may want to 
keep a copy around…

My Solution:
Make a script that makes a netcat ping to a port I want with the password from bandit24.
Then listen on that port on my own terminal, and catch the password.
Script:
24Sol.sh
#!/bin/bash
nc localhost 31001 < /etc/bandit_pass/bandit24
Commands:
nc -l localhost 31001
nc localhost 31001 < /etc/bandit_pass/bandit24 # put in script and copy to /var/spool/bandit24/foo/
Password:
VAfGXJ1PBSsPSnvsjI8p759leLZ9GGar

Level 24->25 Solution:
A daemon is listening on port 30002 and will give you the password for bandit25 
if given the password for bandit24 and a secret numeric 4-digit pincode. 
There is no way to retrieve the pincode except by going through all of the 10000 combinations, called brute-forcing.
Script:
25Sol.sh
#!/bin/bash
mypass=$(cat /etc/bandit_pass/bandit24)
pincode=0
while [ $pincode != 10000 ]
do
printf "%s %04d\n" $mypass $pincode
let pincode+=1
done
Commands:
./25Sol.sh | nc localhost 30002
Password:   
p7TaowMYrmu23Ol8hiZh9UvD0O9hpx8d

Level 25->26 Solution:
Logging in to bandit26 from bandit25 should be fairly easy… The shell for user bandit26 is not /bin/bash, 
but something else. Find out what it is, how it works and how to break out of it.
Solution:
grep /etc/passwd bandit26 shows the login shell to be /usr/bin/showtext
/usr/bin/showtext is a shell script that runs exec more ~/text.txt and exits

Need to make terminal small enough so more will go into partial view mode
Commands:
ssh bandit26@localhost -p 2220 -i bandit26.sshkey
v # opens vi editor 
:set shell=/bin/bash # sets shell to bash
:shell # runs bash shell
cat /etc/bandit_pass/bandit26
Password: c7GvcKlw9mC7aUQaPx7nwFstuAIBw1o1

Level 26->27 Solution:
Use the same method for getting in as the previous level, and use ./bandit27-do
Commands:
same as above
cat/etc/bandit_pass/bandit27
Password: YnQpBuifNMas1hcUFk70ZmqkhUU2EuaS

Level 27->28 Solution:
Good job getting a shell! Now hurry and grab the password for bandit27!
There is a git repository at ssh://bandit27-git@localhost/home/bandit27-git/repo. 
The password for the user bandit27-git is the same as for the user bandit27.
Commands:
#Make temp directory
cd $(mktemp -d)
git clone ssh://bandit27-git@localhost:2220/home/bandit27-git/repo
cat repo/README
Password: AVanL161y9rsbcJIsFHuw35rjaOM19nR

Level 28->29 Solution:
There is a git repository at ssh://bandit28-git@localhost/home/bandit28-git/repo. 
The password for the user bandit28-git is the same as for the user bandit28.
Clone the repository and find the password for the next level.

Commands:
cd $(mktemp -d)
git clone ssh://bandit28-git@localhost:2220/home/bandit28-git/repo
cat README.md
git log # see old history
git checkout bdf3099fb1fb05faa29e80ea79d9db1e29d6c9b9

Password: tQKvmcwNYcFS6vmPHIUSI3ShmsrQZK8S

Level 29->30 Solution:
Same as above

Commands:
cd $(mktemp -d)
git clone ssh://bandit29-git@localhost:2220/home/bandit29-git/repo
cat README.md
git branch -a
git checkout remotes/origin/dev
cat README.md
Password: xbhV3HpNGlTIdnjUrdAlPzc2L6y9EOnS

Level 30->31 Solution:
Same as above
Commands:
cd $(mktemp -d)
git clone ssh://bandit30-git@localhost:2220/home/bandit30-git/repo
git tag
git show secret
Password: OoffzGDlzhAlerFJ2cAiz1D41JW1Mhmt

Level 31->32 Solution:
Same as above
Commands:
cd $(mktemp -d)
git clone ssh://bandit31-git@localhost:2220/home/bandit31-git/repo
cd repo
cat README.md
echo "May I come in?" > key.txt
rm .gitignore
git add -A
git push --set-upstream origin master
Password: rmCBvG56y58BXzv98yZGdO7ATVL5dW8y

Level 32->33 Solution:
After all this git stuff its time for another escape. Good luck!
After login it is an uppercase shell

Current Notes:
Parameter Expansion : https://stackoverflow.com/questions/125281/how-do-i-remove-the-file-suffix-and-path-portion-from-a-path-string-in-bash
/${PATH##*/}/ #returns /bin/
My Solution: (Tedious)
L (Based on PATH) # didn't end up using l (tested ls first)
FIRST=${PATH%%:*}; SECOND=${FIRST#/*/}; ${SECOND%????/*}
S (Based on PATH) = s
FIRST=${PATH%%:*}; THIRD=${FIRST##/*/}; S=${THIRD%???};
BIN (Based on PATH) = /bin
FOURTH=${PATH#/*:*:*:*:*:}; BIN=${FOURTH%%:*}
B (Based on BIN) = /b
B=${BIN%??}; 
A (Based on HOME) = a
SIXTH=${HOME##/*/}; SEVENTH=${SIXTH%??????}; A=${SEVENTH#?};
H (Based on HOME) = h
FIFTH=${HOME%???/*}; H=${FIFTH#?}

/bin/bash # Winning command
FOURTH=${PATH#/*:*:*:*:*:}; BIN=${FOURTH%%:*}; B=${BIN%??}; SIXTH=${HOME##/*/}; SEVENTH=${SIXTH%??????}; A=${SEVENTH#?}; FIRST=${PATH%%:*}; THIRD=${FIRST##/*/}; S=${THIRD%???}; FIFTH=${HOME%???/*}; H=${FIFTH#?}; ${BIN}${B}${A}${S}${H}
Commands:
$0 # This gets the 0th parameter, which is sh
cat /etc/bandit_pass/bandit33 #The uppershell is a setuid running as bandit33 already
Password: odHo63fHiFqcWWJG9rLiLDtPm45KzUKy